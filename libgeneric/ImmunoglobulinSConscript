# -*- mode: python; -*-
# This Python script, SConscript, invoked by the SConscript in the upper directory,
#
# 1. builds libimmunoglobulin.dll

Import('env')

stdobj = env.Object("stdafx.cpp")
svobj = env.Object("../interventions/SimpleVaccine.cpp")

libimmunoglobulindllSrcFiles = [ "../interventions/SimpleImmunoglobulin.cpp",
                              "../interventions/SimpleImmunoglobulinEModule.cpp"
                              ]

libimmunoglobulindllIncFiles = [  "../Eradication/Vaccine.h" ]
libimmunoglobulindllLocalInc = [  "stdafx.h" ]

immunoglobulinenv = env.Clone()
immunoglobulinenv.Append(LIBS=['libgeneric_static'])
immunoglobulinenv.Append(LIBPATH=['$BUILD_DIR/libgeneric_static'])
#immunoglobulinenv.Append(LIBS=['libvector_static'])
#immunoglobulinenv.Append(LIBS=['libmalaria_static'])
immunoglobulinenv.Append(LIBPATH=['$BUILD_DIR/libgeneric'])

libimmunoglobulinDll = immunoglobulinenv.SharedLibrary('libimmunoglobulin', libimmunoglobulindllSrcFiles + stdobj + svobj)
#print "building libimmunoglobulindll: " + str(libimmunoglobulindll)

# take libimmunoglobulin.dll (exclude .lib, .exp) out to be the building target
# to match the number of building variant
libimmunoglobulindllTarget = libimmunoglobulinDll[0]

msvc = GetOption( "MSVC" )
if msvc is not None and msvc != False and msvc != "":

    bvar = immunoglobulinenv['BUILD_VARIANT'] + '|x64'
    print str(libimmunoglobulindllTarget) + ": Generating MSVS" + immunoglobulinenv['MSVS_VERSION'] + " project files for '%s'" % bvar
    
    immunoglobulinenv.MSVSProject(target = 'LibimmunoglobulindllScons' + immunoglobulinenv['MSVSPROJECTSUFFIX'],
                    srcs = libimmunoglobulindllSrcFiles,
		    incs = libimmunoglobulindllIncFiles,
		    localincs = libimmunoglobulindllLocalInc,
 		    buildtarget = libimmunoglobulindllTarget,
                    auto_build_solution = 0,
                    variant = bvar)
