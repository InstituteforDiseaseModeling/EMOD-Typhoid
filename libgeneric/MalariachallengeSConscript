# -*- mode: python; -*-
# This Python script, SConscript, invoked by the SConscript in the upper directory,
#
# 1. builds libantimalarialdrug.dll 

Import('env')

stdobj = env.Object("stdafx.cpp")

libantimalarialdrugdllSrcFiles = [ "../../interventions/AntimalarialDrug.cpp",
                                   "../../interventions/AntimalarialDrugEModule.cpp"
                                 ]

libantimalarialdrugdllIncFiles = [  "../../interventions/Drugs.h" ]
libantimalarialdrugdllLocalInc = [  "stdafx.h" ]

antimalarialdrugenv = env.Clone()
antimalarialdrugenv.Append(LIBS=['libgeneric_static'])
antimalarialdrugenv.Append(LIBPATH=['$BUILD_DIR/libgeneric_static'])
antimalarialdrugenv.Append(LIBS=['libvector_static'])
antimalarialdrugenv.Append(LIBS=['libmalaria_static'])
antimalarialdrugenv.Append(LIBPATH=['$BUILD_DIR/libgeneric'])

libantimalarialdrugDll = antimalarialdrugenv.SharedLibrary('libantimalarialdrug', libantimalarialdrugdllSrcFiles + stdobj)
#print "building libantimalarialdrugdll: " + str(libantimalarialdrugdll)

# take libantimalarialdrug.dll (exclude .lib, .exp) out to be the building target
# to match the number of building variant
libantimalarialdrugdllTarget = libantimalarialdrugDll[0]

msvc = GetOption( "MSVC" )
if msvc is not None and msvc != False and msvc != "":

    bvar = antimalarialdrugenv['BUILD_VARIANT'] + '|x64'
    print str(libantimalarialdrugdllTarget) + ": Generating MSVS" + antimalarialdrugenv['MSVS_VERSION'] + " project files for '%s'" % bvar
    
    antimalarialdrugenv.MSVSProject(target = 'LibantimalarialdrugdllScons' + antimalarialdrugenv['MSVSPROJECTSUFFIX'],
                    srcs = libantimalarialdrugdllSrcFiles,
		    incs = libantimalarialdrugdllIncFiles,
		    localincs = libantimalarialdrugdllLocalInc,
 		    buildtarget = libantimalarialdrugdllTarget,
                    auto_build_solution = 0,
                    variant = bvar)
