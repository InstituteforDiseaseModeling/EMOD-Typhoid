# -*- mode: python; -*-
# This Python script, SConscript, invoked by the SConscript in the upper directory,
#
# 1. builds libsmeardiagnostics.dll 

Import('env')

stdobj = env.Object("stdafx.cpp")

libsmeardiagnosticsdllSrcFiles = [ "../../interventions/SmearDiagnostics.cpp",
                                   "../../interventions/SmearDiagnosticsEModule.cpp"
                                 ]

libsmeardiagnosticsdllLocalInc = [  "stdafx.h" ]

smeardiagnosticsenv = env.Clone()
diag_obj = smeardiagnosticsenv.Object( "diag_sd", "../../interventions/Diagnostics.cpp" )
smeardiagnosticsenv .Append( CPPDEFINES=["ENABLE_TB" ] )
smeardiagnosticsenv.Append(LIBS=['libgeneric_static'])
smeardiagnosticsenv.Append(LIBPATH=['$BUILD_DIR/libgeneric_static'])
smeardiagnosticsenv.Append(LIBPATH=['$BUILD_DIR/libgeneric'])

libsmeardiagnosticsDll = smeardiagnosticsenv.SharedLibrary('libsmeardiagnostics', libsmeardiagnosticsdllSrcFiles + stdobj + diag_obj )
#print "building libsmeardiagnosticsdll: " + str(libsmeardiagnosticsdll)

# take libsmeardiagnostics.dll (exclude .lib, .exp) out to be the building target
# to match the number of building variant
libsmeardiagnosticsdllTarget = libsmeardiagnosticsDll[0]

msvc = GetOption( "MSVC" )
if msvc is not None and msvc != False and msvc != "":

    bvar = smeardiagnosticsenv['BUILD_VARIANT'] + '|x64'
    print str(libsmeardiagnosticsdllTarget) + ": Generating MSVS" + smeardiagnosticsenv['MSVS_VERSION'] + " project files for '%s'" % bvar
    
    smeardiagnosticsenv.MSVSProject(target = 'LibsmeardiagnosticsdllScons' + smeardiagnosticsenv['MSVSPROJECTSUFFIX'],
                    srcs = libsmeardiagnosticsdllSrcFiles,
		    incs = libsmeardiagnosticsdllIncFiles,
		    localincs = libsmeardiagnosticsdllLocalInc,
 		    buildtarget = libsmeardiagnosticsdllTarget,
                    auto_build_solution = 0,
                    variant = bvar)
