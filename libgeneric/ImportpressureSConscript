# -*- mode: python; -*-
# This Python script, SConscript, invoked by the SConscript in the upper directory,
#
# 1. builds libimportpressure.dll

Import('env')

stdobj = env.Object("stdafx.cpp")

libimportpressuredllSrcFiles = [ 
                                 "../interventions/ImportPressure.cpp",
                                 "../interventions/ImportPressureEModule.cpp"
                                    ]

libimportpressuredllIncFiles = [  "../interventions/ImportPressure.h" ]
libimportpressuredllLocalInc = [  "stdafx.h" ]

importpressureenv = env.Clone()
ob_ip = importpressureenv.Object( "ip_ob", "../interventions/Outbreak.cpp" )
importpressureenv.Append( CPPDEFINES=["ENABLE_TB"] )
importpressureenv.Append(LIBS=['libgeneric_static'])
importpressureenv.Append(LIBPATH=['$BUILD_DIR/libgeneric_static'])
importpressureenv.Append(LIBPATH=['$BUILD_DIR/libgeneric'])

libimportpressureDll = importpressureenv.SharedLibrary('libimportpressure', libimportpressuredllSrcFiles + stdobj + ob_ip)
#print "building libimportpressuredll: " + str(libimportpressuredll)

# take libimportpressure.dll (exclude .lib, .exp) out to be the building target
# to match the number of building variant
libimportpressuredllTarget = libimportpressureDll[0]

msvc = GetOption( "MSVC" )
if msvc is not None and msvc != False and msvc != "":

    bvar = importpressureenv['BUILD_VARIANT'] + '|x64'
    print str(libimportpressuredllTarget) + ": Generating MSVS" + importpressureenv['MSVS_VERSION'] + " project files for '%s'" % bvar
    
    importpressureenv.MSVSProject(target = 'LibimportpressuredllScons' + importpressureenv['MSVSPROJECTSUFFIX'],
            srcs = libimportpressuredllSrcFiles,
		    incs = libimportpressuredllIncFiles,
		    localincs = libimportpressuredllLocalInc,
 		    buildtarget = libimportpressuredllTarget,
            auto_build_solution = 0,
            variant = bvar)
