# -*- mode: python; -*-
# This Python script, SConscript, invoked by the SConscript in the upper directory,
#
# 1. builds libindividualrepellent.dll 

Import('env')

stdobj = env.Object("stdafx.cpp")

libindividualrepellentdllSrcFiles = [ "../../interventions/IndividualRepellent.cpp",
                                      "../../interventions/IndividualRepellentEModule.cpp"
                                    ]

libindividualrepellentdllLocalInc = [  "stdafx.h" ]

individualrepellentenv = env.Clone()
individualrepellentenv.Append(LIBS=['libgeneric_static'])
individualrepellentenv.Append(LIBPATH=['$BUILD_DIR/libgeneric_static'])
individualrepellentenv.Append(LIBS=['libvector_static'])
individualrepellentenv.Append(LIBPATH=['$BUILD_DIR/libgeneric'])

libindividualrepellentDll = individualrepellentenv.SharedLibrary('libindividualrepellent', libindividualrepellentdllSrcFiles + stdobj)
#print "building libindividualrepellentdll: " + str(libindividualrepellentdll)

# take libindividualrepellent.dll (exclude .lib, .exp) out to be the building target
# to match the number of building variant
libindividualrepellentdllTarget = libindividualrepellentDll[0]

msvc = GetOption( "MSVC" )
if msvc is not None and msvc != False and msvc != "":

    bvar = individualrepellentenv['BUILD_VARIANT'] + '|x64'
    print str(libindividualrepellentdllTarget) + ": Generating MSVS" + individualrepellentenv['MSVS_VERSION'] + " project files for '%s'" % bvar
    
    individualrepellentenv.MSVSProject(target = 'LibindividualrepellentdllScons' + individualrepellentenv['MSVSPROJECTSUFFIX'],
                    srcs = libindividualrepellentdllSrcFiles,
		    incs = libindividualrepellentdllIncFiles,
		    localincs = libindividualrepellentdllLocalInc,
 		    buildtarget = libindividualrepellentdllTarget,
                    auto_build_solution = 0,
                    variant = bvar)
