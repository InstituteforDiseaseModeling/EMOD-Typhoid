# -*- mode: python; -*-
# This Python script, SConscript, invoked by the SConscript in the upper directory,
#
# 1. builds main DTK core files and generate Eradication program

Import('env')

libgenericSrcFiles = [ "stdafx.cpp",
                       "../baseReportLib/BaseChannelReport.cpp",
                       "../baseReportLib/BaseEventReport.cpp",
                       "../baseReportLib/BaseEventReportIntervalOutput.cpp",
                       "../baseReportLib/BaseTextReport.cpp",
                       "../baseReportLib/BaseTextReportEvents.cpp",
                       "../baseReportLib/BinnedReport.cpp",
                       "../baseReportLib/ChannelDataMap.cpp",
                       "../baseReportLib/ReportUtilities.cpp",
                       "../baseReportLib/stdafx.cpp",
                       "../Eradication/CampaignEvent.cpp",
                       "../Eradication/Climate.cpp",
                       "../Eradication/ClimateByData.cpp",
                       "../Eradication/ClimateConstant.cpp",
                       "../Eradication/ClimateKoppen.cpp",
                       #"../Eradication/ContagionPopulation.cpp",
                       "../Eradication/DemographicsReport.cpp",
                       "../Eradication/DllLoader.cpp",
                       "../Eradication/Individual.cpp",
                       "../Eradication/Infection.cpp",
                       "../Eradication/InterventionsContainer.cpp",
                       "../Eradication/Instrumentation.cpp",
                       "../Eradication/JsonObjectDemog.cpp",
                       "../Eradication/Migration.cpp",
                       "../Eradication/MultiRouteTransmissionGroups.cpp",
                       "../Eradication/Node.cpp",
                       "../Eradication/NodeDemographics.cpp",
                       "../Eradication/NodeEventContext.cpp",
                       "../Eradication/TransmissionGroupsBase.cpp",
                       "../Eradication/TransmissionGroupsFactory.cpp",
                       "../Eradication/NodeRankMap.cpp",
                       "../campaign/NodeSetAll.cpp",
                       "../campaign/NodeSetNodeList.cpp",
                       "../campaign/NodeSetPolygon.cpp",
                       "../Eradication/Properties.cpp",
                       "../Eradication/PropertyReport.cpp",
                       "../Eradication/Report.cpp",
                       "../Eradication/ReportEventRecorder.cpp",
                       "../Eradication/SimpleTransmissionGroups.cpp",
                       "../Eradication/Simulation.cpp",
                       "../Eradication/SimulationConfig.cpp",
                       "../Eradication/SimulationEventContext.cpp",
                       "../Eradication/SpatialReport.cpp",
                       "../Eradication/MultiInterventionEventCoordinator.cpp",
                       "../Eradication/NodeEventCoordinator.cpp",
                       "../Eradication/SimpleEventCoordinator.cpp",
                       "../Eradication/StandardEventCoordinator.cpp",
                       "../Eradication/CoverageByNodeEventCoordinator.cpp",
                       "../Eradication/CalendarEventCoordinator.cpp",
                       "../Eradication/StrainIdentity.cpp",
                       "../Eradication/StrainAwareTransmissionGroups.cpp",
                       "../Eradication/Susceptibility.cpp",
                       "../Interventions/Drugs.cpp",
                       "../interventions/WaningEffectBox.cpp",
                       "../interventions/WaningEffectBoxExponential.cpp",
                       "../interventions/WaningEffectConstant.cpp",
                       "../interventions/WaningEffectExponential.cpp",
                       "../interventions/WaningEffectFactory.cpp",
                       "../Eradication/VectorTransmissionGroups.cpp",
                       "../Eradication/VectorSpeciesParameters.cpp",
                       "../Eradication/MalariaDrugTypeParameters.cpp"
                       ]

libgenericIncFiles = [  "Report.h", "libgeneric_classes.h" ]
libgenericLocalInc = [  "stdafx.h" ]

libgeneric_static = env.StaticLibrary('libgeneric_static', libgenericSrcFiles)
print "building libgeneric_static: " + str(libgeneric_static)

#env.Append( CPPDEFINES=["ENABLE_TB" ] )
#env.Append( CPPDEFINES=["ENABLE_TBHIV" ] )
#env.Append( CPPDEFINES=["ENABLE_POLIO" ] )
env.Append( CPPDEFINES=["_DLLS_" ] )
if env['DiseaseDll'] != "Vector" and env['DiseaseDll'] != "Malaria" and env['DiseaseDll'] != 'Environmental':
    env.Append( CPPDEFINES=["DISABLE_VECTOR" ] )
    if env['DiseaseDll'] != "Generic":
        env.Append( CPPDEFINES=["DISABLE_CLIMATE" ] )
#else:
#    libgenericSrcFiles.append( "../Eradication/VectorTransmissionGroups.cpp" )

if env['DiseaseDll'] != "Malaria":
    env.Append( CPPDEFINES=["DISABLE_MALARIA" ] )
if env['DiseaseDll'] == "Environmental" or env['DiseaseDll'] == "Polio":
    env.Append( CPPDEFINES=["ENABLE_POLIO" ] )
if env['DiseaseDll'] != "HIV" and env['DiseaseDll'] != "STI":
    env.Append( CPPDEFINES=["DISABLE_HIV" ] )
#eradenv.Append(LIBS=['libvector_static'])
# I'm confused: for vector builds, we want to build libgeneric_static WITHOUT Vector (or it won't link because it can't resolve VectorTransmissionGroups), but 
# when we do the vector_static build, we want it WITH Vector ... :(
#env.Append( CPPDEFINES=["DISABLE_VECTOR" ] )

msvc = GetOption( "MSVC" )
if msvc is not None and msvc != False and msvc != "":

    bvar = env['BUILD_VARIANT'] + '|x64'
    print str(libgeneric_static) + ": Generating MSVS" + env['MSVS_VERSION'] + " project files for '%s'" % bvar
   
    env['CCPDBFLAGS'] = '/Zi /Fd${TARGET}.pdb'
    env['PDB']='${TARGET.base}.pdb'
    env.MSVSProject(
        target = 'LibgenericStaticScons' + env['MSVSPROJECTSUFFIX'],
        srcs = libgenericSrcFiles,
		incs = libgenericIncFiles,
		localincs = libgenericLocalInc,
 		buildtarget = libgeneric_static,
        auto_build_solution = 0,
        variant = bvar
    )
